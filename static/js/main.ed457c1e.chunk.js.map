{"version":3,"sources":["components/ItemTypes.js","components/Tag.js","components/EditModal.js","components/TodoItem.js","components/TextInput.js","components/Filters.js","App.js","serviceWorker.js","index.js"],"names":["ItemTypes","Tag","props","react_default","a","createElement","className","type","onClick","e","removeTag","tagIndex","todoIndex","tagName","EditModal","addTagButtonPress","_this","addTag","index","target","previousSibling","value","_this$props","this","tags","deadline","updateText","updateDeadline","toggleBool","onKeyPress","id","onChange","children","autoFocus","src","alt","placeholder","onKeyDown","map","components_Tag","key","width","height","viewBox","d","Component","proptypes","PropTypes","number","isRequired","text","string","arrayOf","func","todoTarget","hover","monitor","component","dragIndex","getItem","hoverIndex","hoverBoundingRect","findDOMNode","getBoundingClientRect","hoverMiddleY","bottom","top","hoverClientY","getClientOffset","y","moveTodo","TodoItem","setListRef","element","listRef","daysUntil","date","today","Date","dueDate","Math","round","getTime","_this2","firstLoad","setTimeout","isComplete","isEditing","toggleTodoComplete","deleteTodo","setTodoText","updateTodo","isDragging","connectDragSource","connectDropTarget","opacity","ref","style","components_EditModal","classList","contains","remove","add","fill","flow","DragSource","beginDrag","connect","dragSource","DropTarget","dropTarget","placeholders","currentPlaceholder","floor","random","length","TextInput","state","formDetails","newTodo","emptyState","changePlaceholder","handleSubmit","preventDefault","submitTodo","setState","Object","objectSpread","newTag","document","getElementById","trim","includes","alert","concat","toConsumableArray","focus","parentNode","slice","setDeadline","toggleFormDetails","transform","onFocus","Filters","_ref","setFilter","filterList","filter","App","todo","filterArray","currentFilter","tagsToAdd","forEach","tag","push","indexToChange","updatedTodo","toggleTodoBool","param","defineProperty","setTodoTextAt","newText","indexToDelete","closest","updateFilters","nextSibling","textContent","newFilterArray","Array","from","Set","keyCode","selectedFilter","sortTodosByDeadline","dragTodo","update","$splice","newDeadline","sorted","sort","b","parse","appNode","TextInput_TextInput","components_Filters","td","components_TodoItem","DragDropContext","MultiBackend","HTML5toTouch","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ed457c1e.chunk.js","sourcesContent":["export default {\r\n    TODO: 'todo'\r\n};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Tag = (props) => {\r\n    return (\r\n        <div className=\"tempTag scale-in-center\">\r\n            <button className=\"deleteTag\" type=\"button\" onClick={(e) => props.removeTag(e, props.tagIndex, props.todoIndex)}>✖</button>\r\n            {props.tagName}\r\n        </div>\r\n    );\r\n}\r\n\r\nTag.propTypes = {\r\n    tagName: PropTypes.string,\r\n    tagIndex: PropTypes.number.isRequired,\r\n    todoIndex: PropTypes.number,\r\n    removeTag: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Tag;","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Tag from './Tag';\r\n\r\nclass EditModal extends Component {\r\n\r\n    addTagButtonPress = (e) => {\r\n        this.props.addTag(this.props.index, e.target.previousSibling.value);\r\n        e.target.previousSibling.value = \"\";\r\n    }\r\n\r\n    render() {\r\n        const { index, \r\n            tags, \r\n            deadline,\r\n            addTag, \r\n            removeTag,\r\n            updateText,\r\n            updateDeadline,\r\n            toggleBool,\r\n            onKeyPress } = this.props; \r\n\r\n        return (\r\n            <div id=\"modalBG\">\r\n                <div id=\"editModal\">\r\n                    <form>\r\n                        <div className=\"row\">\r\n                            <input id=\"editTodoText\" type=\"text\" onChange={updateText} value={this.props.children} autoFocus />\r\n                        </div>\r\n                        <div>\r\n                            <div className=\"row\">\r\n                                <input id=\"inputDeadline\" type=\"date\" value={deadline} onChange={(e) => updateDeadline(index, e.target.value)} />\r\n                                <img src=\"/todoList/img/calendar.svg\" alt=\"Calendar icon\" />\r\n                            </div>\r\n                            <div className=\"row\">\r\n                                <input id=\"tagInput\" type=\"text\" placeholder=\"Add tags\" onKeyDown={(e) => onKeyPress(e, 13, index, e.target.value, addTag)} />\r\n                                <button type=\"button\" onClick={this.addTagButtonPress}>Add Tag</button>\r\n                            </div>\r\n                            <div className=\"row\">\r\n                                <ul id=\"inputTagList\"> \r\n                                    {\r\n                                        //populates the tag ul with all tags in current state\r\n                                        tags.map((tagName, tagIndex) => {\r\n                                            return (\r\n                                                <Tag key={tagName} tagName={tagName} tagIndex={tagIndex} removeTag={removeTag} todoIndex={index} />\r\n                                            );\r\n                                        })\r\n                                    }\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                        <svg onClick={() => toggleBool(index, 'isEditing')} width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n                            <title>Save Changes</title>\r\n                            <path d=\"M13 3h2.996v5h-2.996v-5zm11 1v20h-24v-24h20l4 4zm-17 5h10v-7h-10v7zm15-4.171l-2.828-2.829h-.172v9h-14v-9h-3v20h20v-17.171zm-3 10.171h-14v1h14v-1zm0 2h-14v1h14v-1zm0 2h-14v1h14v-1z\"/>\r\n                        </svg>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nEditModal.proptypes = {\r\n    index: PropTypes.number.isRequired,\r\n    text: PropTypes.string.isRequired,\r\n    deadline: PropTypes.string.isRequired,\r\n    tags: PropTypes.arrayOf(PropTypes.string),\r\n    addTag: PropTypes.func.isRequired,\r\n    removeTag: PropTypes.func.isRequired,\r\n    onKeyPress: PropTypes.func.isRequired,\r\n    updateDeadline: PropTypes.func.isRequired\r\n}\r\n\r\nexport default EditModal;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n//react-dnd imports\r\nimport { findDOMNode } from 'react-dom';\r\nimport { DragSource, DropTarget } from 'react-dnd';\r\nimport ItemTypes from './ItemTypes';\r\nimport flow from 'lodash/flow';\r\n\r\n//component imports\r\nimport EditModal from './EditModal';\r\n\r\nconst todoSource = {\r\n\tbeginDrag(props) {\r\n\t\treturn {\r\n\t\t\tid: props.id,\r\n\t\t\tindex: props.index\r\n\t\t}\r\n\t}\r\n}\r\n\r\nconst todoTarget = {\r\n\thover(props, monitor, component) {\r\n\r\n\t\tif (!component) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tconst dragIndex = monitor.getItem().index;\r\n\t\tconst hoverIndex = props.index;\r\n\r\n\t\t// Don't replace items with themselves\r\n\t\tif (dragIndex === hoverIndex) {\r\n\t\t\treturn ;\r\n\t\t}\r\n\r\n\t\t// Determine rectangle on screen\r\n\t\tconst hoverBoundingRect = findDOMNode(component).getBoundingClientRect();\r\n\r\n\t\t// Get vertical middle\r\n\t\tconst hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\r\n\r\n\t\t// Determine mouse position\r\n\t\tconst clientOffset = monitor.getClientOffset();\r\n\r\n\t\t// Get pixels to the top\r\n\t\tconst hoverClientY = clientOffset.y - hoverBoundingRect.top;\r\n\r\n\t\t// Only perform the move when the mouse has crossed half of the items height\r\n\t\t// When dragging downwards, only move when the cursor is below 50%\r\n\t\t// When dragging upwards, only move when the cursor is above 50%\r\n\r\n\t\t// Dragging downwards\r\n\t\tif (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\r\n\t\t\treturn ;\r\n\t\t}\r\n\r\n\t\t// Dragging upwards\r\n\t\tif (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\r\n\t\t\treturn ;\r\n        }\r\n\r\n\t\t// Time to actually perform the action\r\n\t\tprops.moveTodo(dragIndex, hoverIndex);\r\n\r\n\t\t// Note: we're mutating the monitor item here!\r\n\t\t// Generally it's better to avoid mutations,\r\n\t\t// but it's good here for the sake of performance\r\n\t\t// to avoid expensive index searches.\r\n\t\tmonitor.getItem().index = hoverIndex;\r\n\t}\r\n}\r\n\r\nclass TodoItem extends Component {\r\n\r\n\r\n    static propTypes = {\r\n        index: PropTypes.number.isRequired,\r\n        id: PropTypes.string.isRequired,\r\n        text: PropTypes.string,\r\n        isComplete: PropTypes.bool.isRequired,\r\n        tags: PropTypes.arrayOf(PropTypes.string),\r\n        isEditing: PropTypes.bool.isRequired,\r\n        toggleTodoComplete: PropTypes.func.isRequired,\r\n        firstLoad: PropTypes.bool.isRequired,\r\n        isDragging: PropTypes.bool.isRequired,\r\n        addTag: PropTypes.func.isRequired,\r\n        removeTag: PropTypes.func.isRequired,\r\n        toggleBool: PropTypes.func.isRequired,\r\n        deleteTodo: PropTypes.func.isRequired,\r\n        setTodoText: PropTypes.func.isRequired,\r\n        updateTodo: PropTypes.func.isRequired,\r\n        moveTodo: PropTypes.func.isRequired,\r\n        updateDeadline: PropTypes.func.isRequired\r\n    }\r\n\r\n    //creates a reference to the DOMNode for use when mounted\r\n    setListRef = element => {\r\n        this.listRef = element;\r\n    };\r\n\r\n    //sets firstLoad to false after the animation plays on first render\r\n    //this prevents the animation from replaying when dragging and editing\r\n    componentDidMount() {\r\n        if (this.props.firstLoad) {\r\n            setTimeout(() => {\r\n                this.props.toggleBool(this.props.index, 'firstLoad');\r\n            }, 500);\r\n        }\r\n    }\r\n\r\n    daysUntil = (date) => {\r\n        const oneDay = 24*60*60*1000;\r\n        const today = new Date();\r\n        const dueDate = new Date(date);\r\n        return Math.round((dueDate.getTime() - today.getTime())/(oneDay)) + 1;\r\n    }\r\n\r\n    render() {\r\n        const { index, \r\n                text, \r\n                isComplete,\r\n                tags, \r\n                deadline,\r\n                isEditing,\r\n                firstLoad,\r\n                toggleTodoComplete,\r\n                addTag, \r\n                removeTag,\r\n                toggleBool,\r\n                deleteTodo,\r\n                setTodoText,\r\n                onKeyPress,\r\n                updateTodo,\r\n                updateDeadline,\r\n                isDragging,\r\n                connectDragSource,\r\n                connectDropTarget } = this.props;\r\n\r\n        const completeToggle = (e) => {\r\n            if (isComplete) {\r\n                if (e.target.classList.contains('fillCheckbox')) {\r\n                    e.target.classList.remove('fillCheckbox');\r\n                }\r\n                e.target.classList.add('emptyCheckbox');\r\n                toggleTodoComplete(index);\r\n            }\r\n            else {\r\n                if (e.target.classList.contains('emptyCheckbox')) {\r\n                    e.target.classList.remove('emptyCheckbox');\r\n                }\r\n                e.target.classList.add('fillCheckbox');\r\n                toggleTodoComplete(index);\r\n            }\r\n        }\r\n\r\n        //sets the opacity to 0 \r\n        const opacity = isDragging ? 0 : 1;\r\n\r\n        let element = <li className={firstLoad ? \"todoItem scale-in-center\" : \"todoItem\"} ref={this.setListRef} style={{ opacity }}>\r\n            <button className=\"dragTodo\"><img src=\"todoList/img/drag.svg\" alt=\"Drag todo item\" /></button>\r\n            {\r\n                isEditing ?\r\n                    <EditModal\r\n                        index={index}\r\n                        text={text}\r\n                        deadline={deadline}\r\n                        tags={tags}\r\n                        updateText={e => setTodoText(index, e.target.value)}\r\n                        toggleBool={toggleBool}\r\n                        onKeyPress={onKeyPress} \r\n                        updateTodo={updateTodo}\r\n                        removeTag={removeTag}\r\n                        addTag={addTag}\r\n                        updateDeadline={updateDeadline}\r\n                    >{text}</EditModal>\r\n                :\r\n                    null\r\n            }\r\n            <span className=\"todoItemText\">{text}</span>\r\n            <div className=\"todoDetails\">\r\n                <div className=\"todoSVGs\">\r\n                    <svg className=\"checkbox icon\" onClick={completeToggle} width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n                        <title>Mark Todo as Complete</title>\r\n                        <path fill={isComplete ? \"green\" : \"#aaa\"} d=\"M20 12.194v9.806h-20v-20h18.272l-1.951 2h-14.321v16h16v-5.768l2-2.038zm.904-10.027l-9.404 9.639-4.405-4.176-3.095 3.097 7.5 7.273 12.5-12.737-3.096-3.096z\" />\r\n                    </svg>\r\n                    {\r\n                        isEditing ?\r\n                        <svg className=\"icon\" onClick={() => toggleBool(index, 'isEditing')} width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n                            <title>Save changes</title>\r\n                            <path d=\"M13 3h2.996v5h-2.996v-5zm11 1v20h-24v-24h20l4 4zm-17 5h10v-7h-10v7zm15-4.171l-2.828-2.829h-.172v9h-14v-9h-3v20h20v-17.171zm-3 10.171h-14v1h14v-1zm0 2h-14v1h14v-1zm0 2h-14v1h14v-1z\"/>\r\n                        </svg>\r\n                        :\r\n                        <svg className=\"icon\" onClick={() => toggleBool(index, 'isEditing')} width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n                            <title>Edit todo list item</title>\r\n                            <path d=\"M18.363 8.464l1.433 1.431-12.67 12.669-7.125 1.436 1.439-7.127 12.665-12.668 1.431 1.431-12.255 12.224-.726 3.584 3.584-.723 12.224-12.257zm-.056-8.464l-2.815 2.817 5.691 5.692 2.817-2.821-5.693-5.688zm-12.318 18.718l11.313-11.316-.705-.707-11.313 11.314.705.709z\"/>\r\n                        </svg>\r\n                    }\r\n                    <svg className=\"icon\" onClick={(e) => deleteTodo(e, index)} width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n                        <title>Delete this Todo Item</title>\r\n                        <path d=\"M16 9v4.501c-.748.313-1.424.765-2 1.319v-5.82c0-.552.447-1 1-1s1 .448 1 1zm-4 0v10c0 .552-.447 1-1 1s-1-.448-1-1v-10c0-.552.447-1 1-1s1 .448 1 1zm1.82 15h-11.82v-18h2v16h8.502c.312.749.765 1.424 1.318 2zm-6.82-16c.553 0 1 .448 1 1v10c0 .552-.447 1-1 1s-1-.448-1-1v-10c0-.552.447-1 1-1zm14-4h-20v-2h5.711c.9 0 1.631-1.099 1.631-2h5.316c0 .901.73 2 1.631 2h5.711v2zm-1 2v7.182c-.482-.115-.983-.182-1.5-.182l-.5.025v-7.025h2zm3 13.5c0 2.485-2.017 4.5-4.5 4.5s-4.5-2.015-4.5-4.5 2.017-4.5 4.5-4.5 4.5 2.015 4.5 4.5zm-3.086-2.122l-1.414 1.414-1.414-1.414-.707.708 1.414 1.414-1.414 1.414.707.708 1.414-1.414 1.414 1.414.708-.708-1.414-1.414 1.414-1.414-.708-.708z\"/>\r\n                    </svg>\r\n                </div>\r\n                {\r\n                    deadline && !isComplete ? <p className=\"dueDate\" >Due in {this.daysUntil(deadline)} days</p> : <p className=\"dueDate\" ></p>\r\n                }\r\n            </div>\r\n        </li>;\r\n\r\n        if (isEditing) {\r\n            return element;\r\n        }\r\n        else {\r\n            return connectDragSource( connectDropTarget( element ) );\r\n        }\r\n    }\r\n}\r\n\r\n//fancy export for react-dnd using lodash flow\r\nexport default flow([\r\n    DragSource(ItemTypes.TODO, todoSource, (connect, monitor) => ({\r\n      connectDragSource: connect.dragSource(),\r\n      isDragging: monitor.isDragging(),\r\n    })),\r\n    DropTarget(ItemTypes.TODO, todoTarget, connect => ({\r\n      connectDropTarget: connect.dropTarget(),\r\n    }))\r\n  ])(TodoItem);","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Tag from './Tag';\r\n\r\nlet placeholders = [\r\n    'Buy milk',\r\n    'Run a mile',\r\n    'Do some laundry',\r\n    'Pay water bill',\r\n    'Walk the dog',\r\n    'Make dinner',\r\n    'Clean the bathroom',\r\n    'Do some yardwork',\r\n    'Wash the car',\r\n    'Wash the dishes',\r\n    'Vacuum the floor',\r\n    'Get the mail',\r\n    'Take out the trash',\r\n    'Clean out the fridge',\r\n    'Empty the dishwasher'\r\n];\r\n\r\n//scoped outside TextInput to avoid refreshing currentPlaceholder value everytime the state is updated in the controlled input\r\nlet currentPlaceholder = placeholders[Math.floor(Math.random() * placeholders.length)];\r\n\r\nexport default class TextInput extends Component {\r\n\r\n    static propTypes = {\r\n        submitTodo: PropTypes.func.isRequired,\r\n        onKeyPress: PropTypes.func.isRequired\r\n    };\r\n\r\n    state = {\r\n        formDetails: false,\r\n        newTodo: {\r\n            text: '',\r\n            isEditing: false,\r\n            isComplete: false,\r\n            firstLoad: true,\r\n            deadline: '',\r\n            tags: [ ]\r\n        }\r\n    }\r\n\r\n    //used to reset state after the form is submitted\r\n    //toggleDetails is omitted to prevent resetting it's value\r\n    emptyState = {\r\n        newTodo: {\r\n            text: '',\r\n            isEditing: false,\r\n            isComplete: false,\r\n            firstLoad: true,\r\n            deadline: '',\r\n            tags: [ ]\r\n        }\r\n    }\r\n\r\n    componentDidUpdate () {\r\n        //rotates the details icon next to the input according to formDetails boolenan\r\n        document.getElementById('toggleFormDisplay').style.transform = this.state.formDetails ? \"rotate(180deg)\" : \"rotate(0)\";\r\n    }\r\n\r\n    //picks a new random placeholder text for the main text input field\r\n    changePlaceholder = () => {\r\n        return placeholders[Math.floor(Math.random() * placeholders.length)];\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        //submit the todo item with text and tags from state\r\n        this.props.submitTodo(this.state.newTodo);\r\n\r\n        //randomizes the placeholder text for the todo text input\r\n        currentPlaceholder = this.changePlaceholder();\r\n\r\n        //clears the input form\r\n        this.setState(this.emptyState);\r\n    }\r\n\r\n    //to keep todo text in sync in state\r\n    updateText = (e) => {\r\n        this.setState({\r\n            newTodo: {\r\n                ...this.state.newTodo,\r\n                text: e.target.value\r\n            }\r\n        });\r\n    }\r\n\r\n    //adds the text in the tag input to state\r\n    addTag = () => {\r\n        let newTag = document.getElementById('tagInput');\r\n\r\n        //remove whitespace from tag before comparing to current tag list\r\n        newTag.value = newTag.value.trim();\r\n\r\n        //adds the tag if it doesn't already exist\r\n        if (!this.state.newTodo.tags.includes(newTag.value)) {\r\n            this.setState({\r\n                newTodo: {\r\n                    ...this.state.newTodo,\r\n                    tags: [\r\n                        ...this.state.newTodo.tags,\r\n                        newTag.value\r\n                    ]\r\n                }\r\n            });\r\n            newTag.value = '';\r\n        }\r\n        else {\r\n            alert('This tag already exists');\r\n            newTag.value = '';\r\n        }\r\n\r\n        //refocuses on the input if the add tag button is clicked\r\n        newTag.focus();\r\n    }\r\n\r\n    //removes the text in the tag input to state\r\n    removeTag = (e, tagIndex) => {\r\n        //adds class that runs scale-out animation\r\n        e.target.parentNode.classList.add('scale-out-center');\r\n\r\n        //need to wait for animation to finish ~ .2 sec\r\n        setTimeout(() => {\r\n            this.setState({\r\n                newTodo: {\r\n                    ...this.state.newTodo,\r\n                    tags: [\r\n                        ...this.state.newTodo.tags.slice(0, tagIndex),\r\n                        ...this.state.newTodo.tags.slice(tagIndex + 1)\r\n                    ]\r\n                }\r\n            });\r\n        }, 200)\r\n    }\r\n\r\n    //saves the dealine for newTodo into state\r\n    setDeadline = (e) => {\r\n        this.setState({\r\n            newTodo: {\r\n                ...this.state.newTodo,\r\n                deadline: e.target.value\r\n            }\r\n        });\r\n    }\r\n\r\n    //duplicates the onKeyPress function to allow running function in this scope instead of app.js\r\n    onKeyPress = this.props.onKeyPress;\r\n\r\n    //shows form details when expand button is clicked or input is focused\r\n    toggleFormDetails = (e) => {\r\n        if (e.type === 'click') {\r\n            this.setState({\r\n                formDetails: !this.state.formDetails\r\n            });\r\n        }\r\n        else {\r\n            this.setState({\r\n                formDetails: true\r\n            }); \r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form id=\"createTodo\">\r\n                <h2>What do you have to do?</h2>\r\n                <div className=\"row\">\r\n                    <input id=\"todoText\" type=\"text\" placeholder={currentPlaceholder} onChange={this.updateText} value={this.state.newTodo.text} onKeyDown={(e) => this.onKeyPress(e, 13, e, null, this.handleSubmit)} onFocus={this.toggleFormDetails} />\r\n                    <img src=\"/todoList/img/arrow.svg\" alt=\"Expand form field\" id=\"toggleFormDisplay\" onClick={this.toggleFormDetails} />\r\n                </div>\r\n                {\r\n                    //if formDetails is true, show the rest of the form fields, otherwise show nothing\r\n                    this.state.formDetails ?\r\n                        <div className=\"scale-in-center\" >\r\n                            <div className=\"row\">\r\n                                <input id=\"inputDeadline\" type=\"date\" onChange={this.setDeadline} value={this.state.newTodo.deadline} />\r\n                                <img src=\"/todoList/img/calendar.svg\" alt=\"Calendar icon\" />\r\n                            </div>\r\n                            <div className=\"row\">\r\n                                <input id=\"tagInput\" type=\"text\" placeholder=\"Add tags\" onKeyDown={(e) => this.onKeyPress(e, 13, null, null, this.addTag)} />\r\n                                <button type=\"button\" onClick={this.addTag} >Add Tag</button>\r\n                            </div>\r\n                            <div className=\"row\">\r\n                                <ul id=\"inputTagList\"> \r\n                                    {\r\n                                        //populates the tag ul with all tags in current state\r\n                                        this.state.newTodo.tags.map((tagName, tagIndex) => {\r\n                                            return (\r\n                                                <Tag key={tagName} tagName={tagName} tagIndex={tagIndex} removeTag={this.removeTag} />\r\n                                            );\r\n                                        })\r\n                                    }\r\n                                </ul>\r\n                            </div>\r\n                        </div> : ''\r\n                }\r\n                <button type=\"button\" onClick={this.handleSubmit}>Submit</button>\r\n            </form>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Filters = ({ setFilter, filterList }) => {\r\n\r\n    //switch this to a button that toggles a drop down\r\n    //each item selected will be added to the filters and removed from the filter list\r\n    //clear all filters needs to be an option\r\n    return (\r\n        <select id=\"filterDropdown\" onChange={e => setFilter(e.target.value)}>\r\n            <option>No Filter</option>\r\n            <option>Complete</option>\r\n            <option>Sort by Deadline</option>\r\n            {\r\n                filterList.map((filter, index) => (\r\n                    <option key={filter} index={index}>{filter}</option>\r\n                ))\r\n            }\r\n        </select>\r\n    );\r\n};\r\n\r\nFilters.propTypes = {\r\n    filterList: PropTypes.arrayOf(PropTypes.string)\r\n};\r\n\r\nexport default Filters;","import React, { Component } from 'react';\r\nimport update from 'immutability-helper';\r\nimport './App.scss';\r\n\r\nimport TodoItem from './components/TodoItem';\r\nimport TextInput from './components/TextInput';\r\nimport Filters from './components/Filters';\r\n\r\n//react dnd imports\r\nimport { DragDropContext } from 'react-dnd';\r\nimport MultiBackend from 'react-dnd-multi-backend';\r\nimport HTML5toTouch from 'react-dnd-multi-backend/lib/HTML5toTouch';\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    todo: [ ],\r\n    filterArray: [ ],\r\n    currentFilter: ''\r\n  };\r\n\r\n  //adds a todo list item to the list\r\n  submitTodo = (newTodo) => {\r\n    let tagsToAdd = [];\r\n    newTodo.tags.forEach(tag => {\r\n      if (!this.state.filterArray.includes(tag)) {\r\n        tagsToAdd.push(tag);\r\n      }\r\n    });  \r\n    this.setState({\r\n      todo: [\r\n        ...this.state.todo,\r\n        newTodo\r\n      ],\r\n      filterArray: [\r\n        ...this.state.filterArray,\r\n        ...tagsToAdd\r\n      ]\r\n    });\r\n  }\r\n\r\n  //updates the state with the new todo item created in the editing modal\r\n  updateTodo = (indexToChange, updatedTodo) => {\r\n    this.setState({\r\n      todo: this.state.todo.map((todo, index) => {\r\n        if (index === indexToChange) {\r\n          return {\r\n            ...todo,\r\n            ...updatedTodo\r\n          }\r\n        }\r\n        return todo;\r\n      })\r\n    });\r\n  }\r\n\r\n  //toggles a boolean value on a todo list item\r\n  toggleTodoBool = (indexToChange, param) => {\r\n    this.setState({\r\n      todo: this.state.todo.map((todo, index) => {\r\n        if (index === indexToChange) {\r\n          return {\r\n            ...todo,\r\n            [param]: !todo[param]\r\n          }\r\n        }\r\n        return todo;\r\n      })\r\n    });\r\n  }\r\n\r\n  //sets the new todo list text when user is editing\r\n  setTodoTextAt = (indexToChange, newText) => {\r\n    this.setState({\r\n      todo: this.state.todo.map((todo, index) => {\r\n        if (index === indexToChange) {\r\n          return {\r\n            ...todo,\r\n            text: newText\r\n          }\r\n        }\r\n        return todo;\r\n      })\r\n    });\r\n  }\r\n\r\n  //removes a todo list item from the list\r\n  deleteTodo = (e, indexToDelete) => {\r\n\r\n    //get the todo item element and add slide-out-right class\r\n    //closest works best for consistency over parentNode   \r\n    let target = e.target.closest('li');\r\n    target.classList.add('slide-out-right'); \r\n\r\n    //wait for the animation to finish, then remove todo from state and update filters\r\n    setTimeout(() => {\r\n\r\n      //need to remove the scale-out and scale-in so the next list item doesn't animate \r\n      target.classList.remove('slide-out-right', 'scale-in-center');\r\n      this.setState({\r\n        todo: [\r\n          ...this.state.todo.slice(0, indexToDelete),\r\n          ...this.state.todo.slice(indexToDelete + 1)\r\n        ]\r\n      });\r\n      this.updateFilters();\r\n    }, 400);\r\n  }\r\n\r\n  //removes a given tag if it is present\r\n  removeTag = (e, tagIndex, indexToChange) => {\r\n    if (this.state.todo[indexToChange].tags[tagIndex] === e.target.nextSibling.textContent) {\r\n\r\n      //add scale out animation and wait for the animation to end before removing from state\r\n      e.target.closest('.tempTag').classList.add('scale-out-center');\r\n      setTimeout(() => {\r\n        this.setState({\r\n          todo: this.state.todo.map((todo, index) => {\r\n            if (index === indexToChange) {\r\n              return {\r\n                ...todo,\r\n                tags: [\r\n                  ...todo.tags.slice(0, tagIndex),\r\n                  ...todo.tags.slice(tagIndex + 1)\r\n                ]\r\n              }\r\n            }\r\n            return todo;\r\n          })\r\n        });\r\n\r\n        //remove unused filters here by checking with state\r\n        this.updateFilters();\r\n      }, 200);\r\n    }\r\n    else {\r\n      alert(\"Tag not found or already deleted\");\r\n    }\r\n  }\r\n\r\n  updateFilters = () => {\r\n    //builds a new array of filters from current todos\r\n    let newFilterArray = [];\r\n    this.state.todo.forEach((todo) => {\r\n      todo.tags.forEach(tag => {\r\n        newFilterArray.push(tag);\r\n      })\r\n    });\r\n\r\n    //remove duplicate tags\r\n    newFilterArray = Array.from(new Set(newFilterArray));\r\n\r\n    this.setState({\r\n      filterArray: newFilterArray\r\n    });\r\n  }\r\n\r\n  //adds a tag to a todo item and adds the tag to the filter list\r\n  //prevents duplicate tags from being created\r\n  addTag = (indexToChange, tag) => {    \r\n    if (!this.state.filterArray.includes(tag) && !this.state.todo[indexToChange].tags.includes(tag)) {\r\n      this.setState({\r\n        filterArray: [\r\n          ...this.state.filterArray,\r\n          tag\r\n        ],\r\n        todo: this.state.todo.map((todo, index) => {\r\n          if (index === indexToChange) {\r\n            return {\r\n              ...todo,\r\n              tags: [\r\n                ...todo.tags,\r\n                tag\r\n              ]\r\n            }\r\n          }\r\n          return todo;\r\n        })\r\n      });\r\n    }\r\n    else if (!this.state.todo[indexToChange].tags.includes(tag)) {\r\n      this.setState({\r\n        todo: this.state.todo.map((todo, index) => {\r\n          if (index === indexToChange) {\r\n            return {\r\n              ...todo,\r\n              tags: [\r\n                ...todo.tags,\r\n                tag\r\n              ]\r\n            }\r\n          }\r\n          return todo;\r\n        })\r\n      });\r\n    }\r\n  }\r\n\r\n  toggleTodoComplete = (indexToChange) => {\r\n    this.setState({\r\n      todo: this.state.todo.map((todo, index) => {\r\n        if (index === indexToChange) {\r\n          return {\r\n            ...todo,\r\n            isComplete: !todo.isComplete\r\n          }\r\n        }\r\n        return todo;\r\n      })\r\n    });\r\n  }\r\n\r\n  //runs a function on a defined key press\r\n  onKeyPress = (e, keyCode, index, param, func) => {\r\n    if (e.keyCode === keyCode) {\r\n      func(index, param);\r\n      e.target.value = '';\r\n    }\r\n  }\r\n\r\n  //sets the current filter in state when a filter is selected\r\n  setFilter = (selectedFilter) => {\r\n    if (selectedFilter === 'No Filter') {\r\n      this.setState({\r\n        currentFilter: ''\r\n      });\r\n    }\r\n    else {\r\n      this.setState({\r\n        currentFilter: selectedFilter\r\n      });\r\n    }\r\n    //sorts the todo list in state by deadline\r\n    if (selectedFilter === 'Sort by Deadline') {\r\n      this.sortTodosByDeadline();\r\n    }\r\n  }\r\n\r\n  //react-dnd function to swap todo item positions\r\n  moveTodo = (dragIndex, hoverIndex) => {\r\n\t\tconst todo = this.state.todo;\r\n\t\tconst dragTodo = todo[dragIndex];\r\n\r\n    //using immutability-helper's update function\r\n\t\tthis.setState(\r\n      update(this.state, {\r\n        todo: {\r\n          $splice: [[dragIndex, 1], [hoverIndex, 0, dragTodo]],\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  updateDeadline = (indexToChange, newDeadline) => {\r\n    this.setState({\r\n      todo: this.state.todo.map((todo, index) => {\r\n        if (index === indexToChange) {\r\n          return {\r\n            ...todo,\r\n            deadline: newDeadline\r\n          }\r\n        }\r\n        return todo;\r\n      })\r\n    });\r\n  }\r\n\r\n  //sorts the todo list items by closest deadline with no deadline sorting to the top of the list\r\n  sortTodosByDeadline = () => {\r\n    let sorted = this.state.todo;\r\n    sorted.sort((a,b) => {\r\n      if (!a.deadline) {\r\n        return 0 - Date.parse(b.deadline);\r\n      }\r\n      else if (!b.deadline) {\r\n        return Date.parse(a.deadline) - 0;\r\n      }\r\n      else {\r\n        return Date.parse(a.deadline) - Date.parse(b.deadline);\r\n      }\r\n    });\r\n    this.setState({\r\n      todo: [...sorted]\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\" ref={this.appNode}>\r\n        <h1>Todo List</h1>\r\n\r\n        {/* main todo input form */}\r\n        <TextInput submitTodo={this.submitTodo} onKeyPress={this.onKeyPress} />\r\n\r\n        {/* filter menu for searching based on tags/complete */}\r\n        {\r\n          this.state.todo.length > 0 ?\r\n              <Filters setFilter={this.setFilter} filterList={this.state.filterArray} />\r\n            :\r\n              null\r\n        }\r\n\r\n        {/* todo item list */}\r\n        <ul id=\"listContainer\">\r\n          { \r\n            this.state.todo.map((td, index) => {\r\n              if (this.state.currentFilter === 'Complete') {\r\n                if (td.isComplete) {\r\n                  return <TodoItem \r\n                            key={td.text} \r\n                            id={td.text}\r\n                            index={index}\r\n                            text={td.text} \r\n                            isComplete={td.isComplete}\r\n                            tags={td.tags} \r\n                            deadline={td.deadline}\r\n                            isEditing={td.isEditing}\r\n                            firstLoad={td.firstLoad}\r\n                            toggleTodoComplete={this.toggleTodoComplete}\r\n                            addTag={this.addTag} \r\n                            removeTag={this.removeTag}\r\n                            toggleBool={this.toggleTodoBool} \r\n                            deleteTodo={this.deleteTodo} \r\n                            setTodoText={this.setTodoTextAt}\r\n                            onKeyPress={this.onKeyPress}\r\n                            submitTodo={this.submitTodo}\r\n                            updateTodo={this.updateTodo}\r\n                            moveTodo={this.moveTodo}\r\n                            updateDeadline={this.updateDeadline} />;\r\n                }\r\n                else {\r\n                  return null;\r\n                }\r\n              }\r\n              else if (this.state.currentFilter) {\r\n                if (td.tags.includes(this.state.currentFilter)) {\r\n                  return <TodoItem \r\n                            key={td.text} \r\n                            id={td.text}\r\n                            index={index}\r\n                            text={td.text} \r\n                            isComplete={td.isComplete}\r\n                            tags={td.tags} \r\n                            deadline={td.deadline}\r\n                            isEditing={td.isEditing}\r\n                            firstLoad={td.firstLoad}\r\n                            toggleTodoComplete={this.toggleTodoComplete}\r\n                            addTag={this.addTag} \r\n                            removeTag={this.removeTag}\r\n                            toggleBool={this.toggleTodoBool} \r\n                            deleteTodo={this.deleteTodo} \r\n                            setTodoText={this.setTodoTextAt}\r\n                            onKeyPress={this.onKeyPress}\r\n                            submitTodo={this.submitTodo}\r\n                            updateTodo={this.updateTodo}\r\n                            moveTodo={this.moveTodo}\r\n                            updateDeadline={this.updateDeadline} />;\r\n                }\r\n                else if (this.state.currentFilter === 'Sort by Deadline') {\r\n                  return <TodoItem \r\n                            key={td.text} \r\n                            id={td.text}\r\n                            index={index}\r\n                            text={td.text} \r\n                            isComplete={td.isComplete}\r\n                            tags={td.tags} \r\n                            deadline={td.deadline}\r\n                            isEditing={td.isEditing}\r\n                            firstLoad={td.firstLoad}\r\n                            toggleTodoComplete={this.toggleTodoComplete}\r\n                            addTag={this.addTag} \r\n                            removeTag={this.removeTag}\r\n                            toggleBool={this.toggleTodoBool} \r\n                            deleteTodo={this.deleteTodo} \r\n                            setTodoText={this.setTodoTextAt}\r\n                            onKeyPress={this.onKeyPress}\r\n                            submitTodo={this.submitTodo}\r\n                            updateTodo={this.updateTodo}\r\n                            moveTodo={this.moveTodo}\r\n                            updateDeadline={this.updateDeadline} />;\r\n                }\r\n                else {\r\n                  return null;\r\n                }\r\n              }\r\n              else {\r\n                return <TodoItem \r\n                          key={td.text} \r\n                          id={td.text}\r\n                          index={index}\r\n                          text={td.text} \r\n                          isComplete={td.isComplete}\r\n                          tags={td.tags} \r\n                          deadline={td.deadline}\r\n                          isEditing={td.isEditing}\r\n                          firstLoad={td.firstLoad}\r\n                          toggleTodoComplete={this.toggleTodoComplete}\r\n                          addTag={this.addTag} \r\n                          removeTag={this.removeTag}\r\n                          toggleBool={this.toggleTodoBool} \r\n                          deleteTodo={this.deleteTodo} \r\n                          setTodoText={this.setTodoTextAt}\r\n                          onKeyPress={this.onKeyPress}\r\n                          submitTodo={this.submitTodo}\r\n                          updateTodo={this.updateTodo}\r\n                          moveTodo={this.moveTodo}\r\n                          updateDeadline={this.updateDeadline} />;\r\n              }\r\n            })\r\n          }\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DragDropContext(MultiBackend(HTML5toTouch))(App);","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}